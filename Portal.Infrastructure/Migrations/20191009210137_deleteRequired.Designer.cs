// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Portal.Infrastructure.Contexts;

namespace Portal.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20191009210137_deleteRequired")]
    partial class deleteRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Portal.Application.Models.Carnet", b =>
                {
                    b.Property<Guid>("CarnetID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientID");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateStart");

                    b.HasKey("CarnetID");

                    b.HasIndex("ClientID");

                    b.ToTable("Carnets");
                });

            modelBuilder.Entity("Portal.Application.Models.CarnetType", b =>
                {
                    b.Property<Guid>("CarnetTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarnetID");

                    b.Property<int>("Duration");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.HasKey("CarnetTypeID");

                    b.ToTable("CarnetTypes");
                });

            modelBuilder.Entity("Portal.Application.Models.Entrance", b =>
                {
                    b.Property<Guid>("EntranceID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarnetID");

                    b.Property<DateTime>("Date");

                    b.HasKey("EntranceID");

                    b.ToTable("Entrances");
                });

            modelBuilder.Entity("Portal.Application.Models.Measurement", b =>
                {
                    b.Property<Guid>("MeasurementID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientID");

                    b.Property<DateTime>("Date");

                    b.Property<double>("Height");

                    b.Property<int>("PressureDiastolic");

                    b.Property<int>("PressureSystolic");

                    b.Property<double>("Temperature");

                    b.Property<double>("Weight");

                    b.HasKey("MeasurementID");

                    b.HasIndex("ClientID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Portal.Application.Models.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ContactData");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("PersonID");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Portal.Application.Models.SharedMeasurement", b =>
                {
                    b.Property<Guid>("SharedID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientPersonID");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid?>("TrainerPersonID");

                    b.HasKey("SharedID");

                    b.HasIndex("ClientPersonID");

                    b.HasIndex("TrainerPersonID");

                    b.ToTable("SharedMeasurements");
                });

            modelBuilder.Entity("Portal.Application.Models.Client", b =>
                {
                    b.HasBaseType("Portal.Application.Models.Person");


                    b.ToTable("Client");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Portal.Application.Models.Trainer", b =>
                {
                    b.HasBaseType("Portal.Application.Models.Person");


                    b.ToTable("Trainer");

                    b.HasDiscriminator().HasValue("Trainer");
                });

            modelBuilder.Entity("Portal.Application.Models.Carnet", b =>
                {
                    b.HasOne("Portal.Application.Models.Client")
                        .WithMany("Carnets")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Portal.Application.Models.Measurement", b =>
                {
                    b.HasOne("Portal.Application.Models.Client")
                        .WithMany("Measurements")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Portal.Application.Models.SharedMeasurement", b =>
                {
                    b.HasOne("Portal.Application.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientPersonID");

                    b.HasOne("Portal.Application.Models.Trainer", "Trainer")
                        .WithMany("Shared")
                        .HasForeignKey("TrainerPersonID");
                });
#pragma warning restore 612, 618
        }
    }
}
